apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "liferay-helm.fullname" . }}
  labels:
    {{- include "liferay-helm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "liferay-helm.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "liferay-helm.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "liferay-helm.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: {{ .Chart.Name }}-pre-populate-dxp-data
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh","-c"]
          args:
            - |
              if [ ! -e /temp/liferay/.init ]; then
                mkdir -p /temp/liferay/data
                cp -rv /opt/liferay/data/* /temp/liferay/data

                touch /temp/liferay/.init
              fi
          volumeMounts:
          - mountPath: /temp
            name: liferay-working-data-pvc
        - name: {{ .Chart.Name }}-wait-on-services
          image: busybox:latest
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh","-c"]
          args:
            - |
              trap 'echo "Received signal to Terminate"; exit 0' SIGINT SIGTERM

              {{- if .Values.postgres.internal.enabled }}
              until nc -vz -w 2 {{ default (printf "%s-postgres" (include "liferay-helm.fullname" $)) .Values.postgres.config.host }} {{ .Values.postgres.config.port }}; do
                echo "Waiting for Postgres service"
                sleep 2
              done
              {{- end }}

              {{- if .Values.s3.internal.enabled }}
              until nc -vz -w 2 {{ default (printf "%s-minio" (include "liferay-helm.fullname" $)) .Values.s3.config.host }} {{ .Values.s3.config.ports.api }}; do
                echo "Waiting for S3 service"
                sleep 2
              done
              {{- end }}

              {{- if .Values.elasticsearch.internal.enabled }}
              until nc -vz -w 2 {{ default (printf "%s-elasticsearch" (include "liferay-helm.fullname" $)) .Values.elasticsearch.config.host }} {{ .Values.elasticsearch.config.port }}; do
                echo "Waiting for Elasticsearch service"
                sleep 2
              done
              {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "liferay-helm.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /c/portal/robots
              port: http
            failureThreshold: 20
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /c/portal/robots
              port: http
            failureThreshold: 20
            initialDelaySeconds: 30
            periodSeconds: 10
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          # securityContext:
          #   capabilities:
          #     drop:
          #     - ALL
          #   readOnlyRootFilesystem: true
          #   runAsNonRoot: true
          #   runAsUser: 1000
          volumeMounts:
            # Mounts for liferay working directories allowing the
            # container's root file system to remain readonly.
            - mountPath: /opt/liferay/data
              name: liferay-working-data-pvc
              subPath: liferay/data
            - mountPath: /opt/liferay/logs
              name: liferay-working-data-pvc
              subPath: liferay/logs
            - mountPath: /opt/liferay/tomcat/temp
              name: liferay-working-data-pvc
              subPath: tomcat/temp
            - mountPath: /opt/liferay/tomcat/logs
              name: liferay-working-data-pvc
              subPath: tomcat/logs
            - mountPath: /opt/liferay/tomcat/work
              name: liferay-working-data-pvc
              subPath: tomcat/work
            - mountPath: /opt/liferay/osgi/state
              name: liferay-working-data-pvc
              subPath: osgi/state
            - mountPath: /opt/liferay/reports
              name: liferay-working-data-pvc
              subPath: liferay/reports
            - mountPath: /opt/liferay/routes
              name: liferay-working-data-pvc
              subPath: liferay/routes
            - mountPath: /opt/liferay/liferay.pid
              name: liferay-working-data-pvc
              subPath: liferay/liferay.pid

            # Mounted configuration files
            {{- if not .Values.configmap.overrideDefaults }}
            - mountPath: /opt/liferay/osgi/configs/com.liferay.redirect.internal.configuration.RedirectURLConfiguration.config
              name: liferay-file-resources
              subPath: com.liferay.redirect.internal.configuration.RedirectURLConfiguration.config
              readOnly: true
            - mountPath: /opt/liferay/osgi/configs/com.liferay.portal.k8s.agent.configuration.PortalK8sAgentConfiguration.config
              name: liferay-file-resources
              subPath: com.liferay.portal.k8s.agent.configuration.PortalK8sAgentConfiguration.config
              readOnly: true
            - mountPath: /opt/liferay/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config
              name: liferay-file-resources
              subPath: com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config
              readOnly: true
            - mountPath: /opt/liferay/portal-ext.properties
              name: liferay-file-resources
              subPath: portal-ext.properties
              readOnly: true
            - mountPath: /opt/liferay/portal-custom.properties
              name: liferay-file-resources
              subPath: portal-custom.properties
              readOnly: true
            {{- end }}
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSchedulingGates }}
      schedulingGates:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: 1000
      serviceAccountName: {{ include "liferay-helm.serviceAccountName" . }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: liferay-file-resources
          configMap:
            name: {{ include "liferay-helm.fullname" . }}
            optional: true
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: liferay-working-data-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ default "1Gi" .Values.storage }}
